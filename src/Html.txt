{-# LANGUAGE OverloadedStrings, DataKinds, MultiParamTypeClasses #-}
-- a very crude html template engine
module Html where

import           Data.String        (fromString)
import           Network.HTTP.Media ((//), (/:))
import           Data.Text.Lazy hiding (foldr)
import           Data.Text.Lazy.Encoding
import           Servant hiding (Context)

import qualified Control.Monad.IO.Class as IO
import qualified Data.Text.Lazy.IO as TIO

--accept headers
data HTML
instance Accept HTML where
   contentType _ = "text" // "html" /: ("charset", "utf-8")

-- html type
newtype RawHtml = RawHtml { unraw :: Text }
instance MimeRender HTML RawHtml where
  mimeRender _ = encodeUtf8 . unraw

-- context building types
type Pair = (Text, Text)
type Context = [Pair]

-- pairing operator for context
(=.) :: Show a => String -> a -> Pair
(=.) k v = (fromString $ "{{" ++ k ++ "}}", fromString . show $ v)


renderTemplate :: IO.MonadIO m => Context -> String -> m RawHtml
renderTemplate ctx = fmap (RawHtml . remap ctx) . IO.liftIO . TIO.readFile . ("web/"++)
  where remap = flip . foldr $ (\(k, v) t -> replace k v t)

renderHTML :: IO.MonadIO m => String -> m RawHtml
renderHTML = fmap RawHtml . IO.liftIO . TIO.readFile . ("web/"++)

